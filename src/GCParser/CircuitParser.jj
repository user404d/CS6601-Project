// Copyright (C) Billy Melicher 2012 wrm2ja@virginia.edu
PARSER_BEGIN( CircuitParser )
  package GCParser;
  import java.util.*;
  import java.math.BigInteger;
  import GCParser.Operation.*;
  import java.io.*;

  public abstract class CircuitParser<T> {

    static {
      OperationNameResolver.initOperations();
    }
    
    private int major_version;
    private int minor_version;
    private int lineNumber;
    private boolean errors;
    private int partyComp = Input_Variable.ALL;
    protected File file = null;
    private boolean included = false;
    private Map<String, T> var_map;
    private Set<File> ancestorIncludes = new TreeSet<File>();

    protected CircuitParser( File readFrom, InputStream io ){
      this( io );
      file = readFrom;
    }

    protected CircuitParser( File readFrom, InputStream io, CircuitParser p ) throws IOException {
      this( readFrom, io );
      partyComp = p.partyComp;
      included = true;
      ancestorIncludes.addAll( p.ancestorIncludes );
      ancestorIncludes.add(readFrom.getCanonicalFile());
    }

    protected int lineNumber(){
      return lineNumber;
    }

    protected int partyComp(){
      return partyComp;
    }

    protected void setPartyComp( int i ){
      partyComp = i;
    }

    public void parse() throws CircuitDescriptionException {
      readInputs();
      read();
    }

    public void read() throws CircuitDescriptionException {
      errors = false;
      try {
	GarbledCircuit();
      } catch ( CircuitDescriptionException e ){
	log(e);
      } catch ( ParseException e ){
	log(e);
      } catch ( FileNotFoundException e ){
	log(e);
      } catch (TokenMgrError e ){
	log(e);
      } catch( IOException e ){
	log(e);
      }
      if( errors ){
	throw new CircuitDescriptionException("Error reading circuit description");
      }
    }

    public void readInputs() throws CircuitDescriptionException {
      lineNumber = 1;
      errors = false;
      var_map = new TreeMap<String, T>();
      Variable.executer = this;
      try {
	InputSection();
      } catch ( CircuitDescriptionException e ){
	log(e);
      } catch ( ParseException e ){
	log(e);
      } catch ( FileNotFoundException e ){
	log(e);
      } catch (TokenMgrError e ){
	log(e);
      } catch( IOException e ){
	log(e);
      }
      if( errors ){
	throw new CircuitDescriptionException("Error reading circuit description");
      }
    }
    
    private void log( Exception e ){
      System.out.println( e.getMessage() + " on line "+lineNumber+" in file "+file.getName());
      errors = true;
    }
    private void log( TokenMgrError e ){
      System.out.println( e.getMessage() + " on line "+lineNumber+" in file "+file.getName());
      errors = true;
    }
    private void log( CircuitDescriptionException e ){
      System.out.println( e.getMessage() + " in file "+file.getName());
      errors = true;
    }

    protected Set<String> curVars() {
      return var_map.keySet();
    }

    protected T getVar( String name ) throws CircuitDescriptionException {
      T var = var_map.get(name);
      if( var == null ){
	throw new CircuitDescriptionException("Variable \""+name+"\" not defined", lineNumber );
      }
      return var;
    }
    protected void putVar( String name, T v ) throws CircuitDescriptionException {
      try{
	T old = var_map.put( name, v );
	if( old != null )
	  throw new CircuitDescriptionException("Variable \""+name+"\" previously defined", lineNumber );
      } catch ( CircuitDescriptionException e ){
	log( e );
      }
    }

    protected abstract T computedVariable( String name, OpDirections op, List<T> args ) throws CircuitDescriptionException;
    protected abstract T inputVariable( String name, int party, int bits ) throws CircuitDescriptionException;
    protected abstract void addOutput( T val, OutputFormat fmt ) throws CircuitDescriptionException;
    protected abstract T constantVariable( BigInteger value, int bits ) throws CircuitDescriptionException;
    protected abstract void include( File fname, Map<String,T> inMap, Map<String,String> outMap )
      throws CircuitDescriptionException, FileNotFoundException, IOException ;
    
    protected T constantVariable( BigInteger value ) throws CircuitDescriptionException {
      return constantVariable( value, value.bitLength() + 1 );
    }

    private boolean isCircularInclude( File other ) throws IOException {
      return ancestorIncludes.contains(other.getCanonicalFile());
    }

    protected void removeVar( String key ) {
      var_map.remove( key );
    }

    private void includeFile( String fname, Map<String,T> inMap, Map<String,String> outMap ) throws CircuitDescriptionException, FileNotFoundException, IOException {
      File includeFile = new File( fname ); 
      if( !includeFile.isAbsolute() ){
	if( file == null )
	  throw new CircuitDescriptionException("Cannot include relative path when parser is not initialized with File",lineNumber);
        includeFile = new File( file.getParentFile(), fname );
      } 
      if( isCircularInclude(includeFile) ){
        throw new CircuitDescriptionException("Circular include detected when including file "+fname, lineNumber);
      }
      include( includeFile, inMap, outMap );
    }
  }
PARSER_END( CircuitParser )

SKIP: { " " | "\t" | "\r" }
TOKEN: {
    < COLON : ":" >
  | < PERIOD : "." >
  | < COMMA : "," >
  | < LINE_ENDING : "\n" >
  | < OPEN_PAREN : "(" >
  | < CLOSE_PAREN : ")" >
  | < HEX : "hex" >
  | < INPUT_MARK : ".input" >
  | < OUTPUT_MARK : ".output" >
  | < SIGNED_MARK : "signed" >
  | < REMOVE_MARK : ".remove" >
  | < PROFILER : ".profile" >
  | < INCLUDE : ".include" >
  | < VERSION : ".version" >
  | < UNSIGNED_MARK : "unsigned" > 
  | < START_PARTY : ".startparty" > 
  | < END_PARTY : ".endparty" >
  | < PATH : "<" (~[ ">", "\n" ])* ">" >
  | < IDENTIFIER : ["a"-"z"] ( ["a"-"z"] | ["0"-"9"] | "_" )* >
  | < INTEGER : ("-")? (["0"-"9"])+ >
  | < COMMENT : "//" (~[ "\n" ])* >
}

void InputSection() throws CircuitDescriptionException, FileNotFoundException, IOException:
{}
{
  Version_Line()
    ( InputLine()
      LineEnding() )+

    ( PartyChange()
      LineEnding()
      ( Calculation()
	LineEnding() )*
      PartyChange()
      LineEnding() )*

    ( RemoveVar()
      LineEnding() )*

}

void GarbledCircuit() throws CircuitDescriptionException, FileNotFoundException, IOException:
{}
{

  NonRemoveCalc()
    ( LineEnding() ( Calculation() | OutputLine() )? )*
  <EOF>
}
void Version_Line():
{
  int major = 1;
  int minor = 0;
}
{
  ( <VERSION> 
    major = IntDigits()
    <PERIOD>
    minor = IntDigits()
    LineEnding() )?
  {
    major_version = major;
    minor_version = minor;
  }
}
void LineEnding():
{}
{
  ( <COMMENT> )?
  ( <LINE_ENDING> )
  { lineNumber++; }
}

void InputLine() throws CircuitDescriptionException:
{
  String id;
  int bitcount;
  int party;
}
{
  <INPUT_MARK> 
  id = Identifier() 
  party = IntDigits()
  bitcount = IntDigits()
  {
    if( party != Input_Variable.CLIENT && party != Input_Variable.SERVER ){
      throw new CircuitDescriptionException("Cannot recognize party "+party,lineNumber);
    }
    if( partyComp != Input_Variable.ALL ){
      party = partyComp;
    }
    T inputv = inputVariable( id, party, bitcount );
    putVar( id, inputv );
  }
}

void OutputLine() throws CircuitDescriptionException:
{ 
  String outid;
  OutputFormat fmt = new OutputFormat(false);
}
{
  <OUTPUT_MARK> 
  outid = Identifier()
  ( ( <SIGNED_MARK> 
    { fmt = new OutputFormat(true); } ) |
    ( <UNSIGNED_MARK> ) |
    ( <HEX> { fmt = new HexFormat(); } ) )?
  {
    T outvar = getVar( outid );
    addOutput( outvar, fmt );
  }
}
void Calculation() throws CircuitDescriptionException, FileNotFoundException, IOException:
{}
{
  ( EvalTerm() |
    Include() |
    RemoveVar() |
    Profile() )
}

void Profile() throws CircuitDescriptionException:
{
  String profile_id = "";
}
{
  <PROFILER>
    ( profile_id = Identifier() )?
  {
    OpCircuitUser.setActiveCounter( profile_id );
  }
}

void NonRemoveCalc() throws CircuitDescriptionException, FileNotFoundException, IOException:
{}
{
  EvalTerm() |
    Include() |
    Profile() |
    OutputLine()
}

void RemoveVar() throws CircuitDescriptionException:
{
  String temp;
}
{
  <REMOVE_MARK>
    temp = Identifier()
  {
    removeVar( temp );
  }
}

void PartyChange() throws CircuitDescriptionException:
{
  int party = partyComp;
  if( included ){
    throw new CircuitDescriptionException("Cannot change evaluating party inside included file", lineNumber );
  }
}
{
  ( <START_PARTY>
    party = IntDigits()
    {
      if( partyComp != Input_Variable.ALL && partyComp != party ){
	throw new CircuitDescriptionException("Cannot begin a different local computation block inside of a local computation block",lineNumber);
      }
      if( party != Input_Variable.CLIENT && party != Input_Variable.SERVER ){
	throw new CircuitDescriptionException("Cannot recognize party "+party, lineNumber );
      }
      setPartyComp( party );
    }
  ) |
  ( <END_PARTY>
    ( party = IntDigits() )?
    {
      if( included && partyComp != Input_Variable.ALL )
	throw new CircuitDescriptionException("Cannot end local computation block in an included file which is inside a local computation block",lineNumber);
      if( party != partyComp )
	throw new CircuitDescriptionException("Cannot end local computation block when you are not in a local computation block");
      setPartyComp( Input_Variable.ALL );
    }
  )
}

void Include() throws CircuitDescriptionException, FileNotFoundException, IOException:
{
  Token tpath;
  Map<String,String> outMap;
  Map<String,T> inMap;
}
{
  <INCLUDE>
  tpath = <PATH>
  <OUTPUT_MARK>
  outMap = Mapping()
  <INPUT_MARK>
  inMap = InMapping()

  {
    String path = tpath.image;
    path = path.substring( 1, path.length()-1 );
    includeFile( path, inMap, outMap );
  }
}

void EvalTerm() throws CircuitDescriptionException:
{
  String outid;
  String name;
  T temp;
  ArrayList<T> inputs = new ArrayList<T>();
}
{
  outid = Identifier() // output variable
  name = Identifier() // operation name

  ( temp = VariableInput() 
    { 
      inputs.add( temp ); 
    }
  )*
  // variables
  {
    OpDirections op = OperationNameResolver.get( name );
    if( op == null ){
      throw new CircuitDescriptionException("Operation \""+name+"\" not recognized", lineNumber );
    }
    T newv = computedVariable( outid, op, inputs );
    putVar( outid, newv );
  }
}
T VariableInput() throws CircuitDescriptionException:
{
  String id;
  BigInteger num;
  T var; 
  int bits;
}
{
  (
    // named variable
    id = Identifier() 
    { 
      var = getVar(id);
      return var;
    }
  ) | (
    // constant
    num = Digits()
    { var = constantVariable( num ); }
    ( 
      <COLON>
      bits = IntDigits()
      {
	var = constantVariable( num, bits ); 
      }
    )?
    {
      return var;
    }
  )
}
String Identifier():
{ Token t; }
{
  t = <IDENTIFIER>
  { return t.image; }
}
BigInteger Digits():
{ Token t; }
{
  t = <INTEGER>
  { 
    try{ 
      return new BigInteger( t.image ); 
    } catch (NumberFormatException e){
      // will never happen
      return BigInteger.ZERO;
    }
  }
}
int IntDigits():
{ Token t; }
{
  t = <INTEGER>
  { 
    try{
      return Integer.parseInt( t.image );
    } catch( NumberFormatException e ){
      // will never happen
      return 0;
    }
  }
}
Map<String,String> Mapping():
{
  String to;
  String from;
  Map<String,String> ans = new HashMap<String,String>();
}
{
  <OPEN_PAREN>
  (
    to = Identifier()
    <COLON>
    from = Identifier()
    ( <COMMA> ) ? 
    {
      ans.put( to, from );
    }
    
  )*
  <CLOSE_PAREN>
  { return ans; }
}
Map<String,T> InMapping() throws CircuitDescriptionException:
{
  String to;
  T from;
  Map<String,T> ans = new TreeMap<String,T>();
}
{
  <OPEN_PAREN>
  (
    to = Identifier()
    <COLON>
    from = VariableInput()
    ( <COMMA> ) ? 
    {
      ans.put( to, from );
    }
    
  )*
  <CLOSE_PAREN>
  { return ans; }
}
